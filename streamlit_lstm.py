# -*- coding: utf-8 -*-
"""STREAMLIT LSTM.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1eoN80OO2qR9Eyhovyf9Kc39c7xjxeHiS
"""

# stock_forecast.py
import streamlit as st
import yfinance as yf
import pandas as pd
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
import matplotlib.pyplot as plt
from datetime import datetime, timedelta

# Set page config
st.set_page_config(page_title="Stock Forecast", layout="wide")

# Title
st.title("üìà Linear Regression Stock Price Forecast")
st.write("Predict stock high prices using linear regression")

# User inputs
col1, col2 = st.columns(2)
with col1:
    ticker = st.text_input("Enter Stock Ticker:", "AAPL", help="e.g., AAPL, GOOGL, MSFT, HDFCBANK.NS")
with col2:
    days_back = st.slider("Number of days to analyze:", 30, 1000, 365)

# Calculate dates
end_date = datetime.today()
start_date = end_date - timedelta(days=days_back)

st.write(f"Analyzing data from {start_date.strftime('%Y-%m-%d')} to {end_date.strftime('%Y-%m-%d')}")

if st.button("Run Forecast Analysis"):
    if not ticker:
        st.warning("‚ö†Ô∏è Please enter a stock ticker symbol")
    else:
        try:
            with st.spinner('üì• Downloading stock data...'):
                # Download data
                data = yf.download(ticker, start=start_date, end=end_date, progress=False)

            if data.empty or len(data) < 5:
                st.error(f"‚ùå No sufficient data found for {ticker}. Please check the ticker symbol.")
            else:
                # Use High prices
                d_high = data["High"]

                # Show data
                st.subheader(f"üìä Stock Data for {ticker}")
                col1, col2 = st.columns(2)
                with col1:
                    st.metric("Current High", f"${d_high.iloc[-1]:.2f}")
                    st.metric("Data Points", len(d_high))
                with col2:
                    st.metric("Start Date", d_high.index[0].strftime('%Y-%m-%d'))
                    st.metric("End Date", d_high.index[-1].strftime('%Y-%m-%d'))

                st.dataframe(d_high.tail(10))

                # Prepare data for machine learning
                # Convert dates to numeric values
                X = np.array([d.toordinal() for d in d_high.index]).reshape(-1, 1)
                y = d_high.values

                # Train linear regression model
                model = LinearRegression()
                model.fit(X, y)

                # Make predictions
                y_pred = model.predict(X)

                # Calculate error
                rmse = np.sqrt(mean_squared_error(y, y_pred))
                r_squared = model.score(X, y)

                # Display metrics
                st.subheader("üìà Model Performance")
                col1, col2, col3 = st.columns(3)
                with col1:
                    st.metric("RMSE (Error)", f"${rmse:.2f}")
                with col2:
                    st.metric("R¬≤ Score", f"{r_squared:.4f}")
                with col3:
                    st.metric("Trend Slope", f"${model.coef_[0]:.6f}/day")

                # Create visualization
                st.subheader("üìä Price Prediction Chart")
                fig, ax = plt.subplots(figsize=(12, 6))

                # Plot actual vs predicted
                ax.plot(d_high.index, y, label='Actual High Price', linewidth=2, color='blue')
                ax.plot(d_high.index, y_pred, label='Predicted High Price', linewidth=2, color='red', linestyle='--')

                ax.set_title(f'{ticker} - Actual vs Predicted High Prices', fontsize=14, fontweight='bold')
                ax.set_xlabel('Date')
                ax.set_ylabel('Price ($)')
                ax.legend()
                ax.grid(True, alpha=0.3)
                plt.xticks(rotation=45)
                plt.tight_layout()

                st.pyplot(fig)

                # Forecast next day
                st.subheader("üîÆ Next Day Forecast")
                last_date = d_high.index[-1]
                next_day_ordinal = last_date.toordinal() + 1
                next_day_forecast = model.predict(np.array([[next_day_ordinal]]))[0]
                current_price = d_high.iloc[-1]
                price_change = next_day_forecast - current_price
                change_percent = (price_change / current_price) * 100

                col1, col2 = st.columns(2)
                with col1:
                    st.metric(
                        "Next Day Forecast",
                        f"${next_day_forecast:.2f}",
                        delta=f"{price_change:.2f} ({change_percent:.2f}%)"
                    )
                with col2:
                    st.metric("Current Price", f"${current_price:.2f}")

                # Additional info
                with st.expander("‚ÑπÔ∏è How to interpret results"):
                    st.write("""
                    - **RMSE**: Root Mean Square Error - lower is better (measures prediction error)
                    - **R¬≤ Score**: How well the model fits the data (closer to 1.0 is better)
                    - **Trend Slope**: Daily price trend (positive = upward trend)
                    - **Next Day Forecast**: Predicted high price for the next trading day
                    """)

        except Exception as e:
            st.error(f"‚ùå An error occurred: {str(e)}")
            st.info("üí° Tips: Check your internet connection and verify the ticker symbol exists")

st.markdown("---")
st.markdown("Built with Streamlit ‚Ä¢ Uses Yahoo Finance data")

!pip install streamlit yfinance pandas numpy scikit-learn matplotlib
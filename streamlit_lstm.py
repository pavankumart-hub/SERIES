# -*- coding: utf-8 -*-
"""STREAMLIT LSTM.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1eoN80OO2qR9Eyhovyf9Kc39c7xjxeHiS
"""

# streamlit_linear_regression.py
import streamlit as st
import yfinance as yf
import pandas as pd
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
import matplotlib.pyplot as plt
from datetime import datetime
import warnings
warnings.filterwarnings('ignore')

st.set_page_config(page_title="Linear Regression Forecast", layout="wide")
st.title("ðŸ“ˆ Linear Regression Forecast: Time vs Company High Price")

# --------------------------
# User Inputs
# --------------------------
col1, col2 = st.columns(2)
with col1:
    ticker = st.text_input("Enter Ticker Symbol:", "HDFCBANK.NS")
with col2:
    start_date = st.date_input("Start Date:", pd.to_datetime("2020-01-01"))
    end_date = st.date_input("End Date:", pd.to_datetime(datetime.today().strftime('%Y-%m-%d')))

# --------------------------
# Download Data
# --------------------------
@st.cache_data
def load_data(ticker, start_date, end_date):
    try:
        data = yf.download(ticker, start=start_date, end=end_date)
        if data.empty:
            st.error(f"No data found for ticker: {ticker}")
            return None
        return data
    except Exception as e:
        st.error(f"Error downloading data: {e}")
        return None

if st.button("Run Analysis"):
    if ticker:
        with st.spinner('Downloading data...'):
            data = load_data(ticker, start_date, end_date)

        if data is not None and not data.empty:
            d_high = data["High"]

            st.write(f"ðŸ“Š Showing last 5 high prices for {ticker}")
            st.dataframe(d_high.tail(5))

            # Check if we have enough data
            if len(d_high) < 2:
                st.error("Not enough data points for analysis. Please select a wider date range.")
            else:
                # --------------------------
                # Prepare Data for Regression
                # --------------------------
                # Convert dates to ordinal (numeric) format
                X = np.array([d.toordinal() for d in d_high.index]).reshape(-1, 1)
                y = d_high.values

                # Train Linear Regression
                model = LinearRegression()
                model.fit(X, y)

                # Predict
                y_pred = model.predict(X)

                # RMSE
                rmse = np.sqrt(mean_squared_error(y, y_pred))

                # Display metrics
                col1, col2, col3 = st.columns(3)
                with col1:
                    st.metric("RMSE", f"{rmse:.4f}")
                with col2:
                    st.metric("RÂ² Score", f"{model.score(X, y):.4f}")
                with col3:
                    st.metric("Slope", f"{model.coef_[0]:.6f}")

                # --------------------------
                # Plot Actual vs Predicted
                # --------------------------
                fig, ax = plt.subplots(figsize=(12, 6))
                ax.plot(d_high.index, y, label="Actual High", linewidth=2)
                ax.plot(d_high.index, y_pred, label="Predicted High (Linear Regression)", linewidth=2, linestyle='--')
                ax.set_title(f"Linear Regression: {ticker} High Price vs Time", fontsize=14, fontweight='bold')
                ax.set_xlabel("Date", fontsize=12)
                ax.set_ylabel("High Price", fontsize=12)
                ax.legend(fontsize=10)
                ax.grid(True, alpha=0.3)
                plt.xticks(rotation=45)
                plt.tight_layout()
                st.pyplot(fig)

                # --------------------------
                # Forecast Next Day
                # --------------------------
                next_day = np.array([[d_high.index[-1].toordinal() + 1]])
                next_day_forecast = model.predict(next_day)[0]

                st.success(f"ðŸ“… Forecast High Price for Next Trading Day: **{next_day_forecast:.2f}**")

                # Additional info
                st.info(f"**Analysis Summary:**\n"
                       f"- Data Points: {len(d_high)}\n"
                       f"- Date Range: {d_high.index[0].strftime('%Y-%m-%d')} to {d_high.index[-1].strftime('%Y-%m-%d')}\n"
                       f"- Current High: {d_high.iloc[-1]:.2f}")
        else:
            st.error("Failed to load data. Please check the ticker symbol and date range.")
    else:
        st.warning("Please enter a ticker symbol.")
else:
    st.info("ðŸ‘† Click 'Run Analysis' to generate the forecast")
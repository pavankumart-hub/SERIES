# -*- coding: utf-8 -*-
"""STREAMLIT LSTM.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1eoN80OO2qR9Eyhovyf9Kc39c7xjxeHiS
"""

# streamlit_linear_regression.py
import streamlit as st
import yfinance as yf
import pandas as pd
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
import matplotlib.pyplot as plt
from datetime import datetime

st.title("ðŸ“ˆ Linear Regression Forecast: Time vs Company High Price")

# --------------------------
# User Inputs
# --------------------------
ticker = st.text_input("Enter Ticker Symbol:", "HDFCBANK.NS")
start_date = st.date_input("Start Date:", pd.to_datetime("2020-01-01"))
end_date = st.date_input("End Date:", pd.to_datetime(datetime.today().strftime('%Y-%m-%d')))

# --------------------------
# Download Data
# --------------------------
@st.cache_data
def load_data(ticker, start_date, end_date):
    data = yf.download(ticker, start=start_date, end=end_date)
    return data

data = load_data(ticker, start_date, end_date)
d_high = data["High"]

st.write(f"ðŸ“Š Showing last 5 high prices for {ticker}")
st.dataframe(d_high.tail(5))

# --------------------------
# Prepare Data for Regression
# --------------------------
# Convert dates to ordinal (numeric) format
X = np.array([d.toordinal() for d in d_high.index]).reshape(-1, 1)
y = d_high.values

# Train Linear Regression
model = LinearRegression()
model.fit(X, y)

# Predict
y_pred = model.predict(X)

# RMSE
rmse = np.sqrt(mean_squared_error(y, y_pred))
st.write(f"ðŸ“‰ RMSE: {rmse:.4f}")

# --------------------------
# Plot Actual vs Predicted
# --------------------------
fig, ax = plt.subplots(figsize=(10,5))
ax.plot(d_high.index, y, label="Actual High")
ax.plot(d_high.index, y_pred, label="Predicted High (Linear Regression)")
ax.set_title(f"Linear Regression: {ticker} High Price vs Time")
ax.set_xlabel("Date")
ax.set_ylabel("High Price")
ax.legend()
ax.grid(True)
st.pyplot(fig)

# --------------------------
# Forecast Next Day
# --------------------------
next_day = np.array([[d_high.index[-1].toordinal() + 1]])
next_day_forecast = model.predict(next_day)[0]
st.success(f"ðŸ“… Forecast High Price for Next Day: {next_day_forecast:.2f}")
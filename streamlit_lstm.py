# -*- coding: utf-8 -*-
"""STREAMLIT LSTM.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1eoN80OO2qR9Eyhovyf9Kc39c7xjxeHiS
"""

# final_app.py
import streamlit as st
import yfinance as yf
import pandas as pd
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
import matplotlib.pyplot as plt
from datetime import datetime, timedelta
import traceback

def main():
    st.set_page_config(page_title="Stock Forecast", layout="wide")
    st.title("ðŸ“ˆ Linear Regression Forecast: Time vs Company High Price")

    try:
        # User Inputs
        col1, col2 = st.columns(2)
        with col1:
            ticker = st.text_input("Enter Ticker Symbol:", "AAPL")
        with col2:
            end_date = datetime.today()
            start_date = end_date - timedelta(days=365)  # 1 year default
            start = st.date_input("Start Date:", start_date)
            end = st.date_input("End Date:", end_date)

        if st.button("Generate Forecast"):
            if not ticker:
                st.warning("Please enter a ticker symbol")
                return

            with st.spinner('Downloading data...'):
                try:
                    data = yf.download(ticker, start=start, end=end)
                    if data.empty:
                        st.error("No data found. Check ticker symbol and date range.")
                        return
                except Exception as e:
                    st.error(f"Error downloading data: {e}")
                    return

            # Prepare data
            d_high = data["High"]

            st.subheader(f"Data for {ticker}")
            st.dataframe(d_high.tail())

            # Convert dates to ordinal
            X = np.array([d.toordinal() for d in d_high.index]).reshape(-1, 1)
            y = d_high.values

            # Train model
            model = LinearRegression()
            model.fit(X, y)
            y_pred = model.predict(X)

            # Calculate metrics
            rmse = np.sqrt(mean_squared_error(y, y_pred))

            # Display results
            col1, col2 = st.columns(2)
            with col1:
                st.metric("RMSE", f"{rmse:.4f}")
                st.metric("RÂ² Score", f"{model.score(X, y):.4f}")

            # Plot
            fig, ax = plt.subplots(figsize=(12, 6))
            ax.plot(d_high.index, y, label="Actual High", linewidth=2)
            ax.plot(d_high.index, y_pred, label="Predicted", linewidth=2, linestyle='--')
            ax.set_title(f"Linear Regression: {ticker} High Price")
            ax.set_xlabel("Date")
            ax.set_ylabel("High Price")
            ax.legend()
            ax.grid(True, alpha=0.3)
            plt.xticks(rotation=45)
            plt.tight_layout()
            st.pyplot(fig)

            # Forecast next day
            next_day = np.array([[d_high.index[-1].toordinal() + 1]])
            next_forecast = model.predict(next_day)[0]

            st.success(f"ðŸ“… Next Day Forecast: **{next_forecast:.2f}**")

    except Exception as e:
        st.error(f"Application error: {e}")
        st.text(traceback.format_exc())

if __name__ == "__main__":
    main()
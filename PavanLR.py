# -*- coding: utf-8 -*-
"""STREAMLIT LSTM.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1eoN80OO2qR9Eyhovyf9Kc39c7xjxeHiS
"""

# streamlit_app.py
import streamlit as st
import yfinance as yf
import pandas as pd
import numpy as np
from sklearn.preprocessing import PolynomialFeatures
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
import matplotlib.pyplot as plt
from datetime import datetime, timedelta
from statsmodels.stats.diagnostic import acorr_ljungbox
from scipy.stats import jarque_bera

# Streamlit page setup
st.set_page_config(
    page_title="üìà Polynomial Stock Price Forecast",
    page_icon="üìä",
    layout="wide"
)

# Title
st.title("üìà Polynomial Regression Stock Price Forecast App")
st.markdown("Predict and analyze stock prices using Polynomial Regression")

# Sidebar
st.sidebar.header("Settings")
ticker = st.sidebar.text_input("Stock Ticker", "AAPL").upper()
days = st.sidebar.slider("Days to Analyze", 30, 365, 180)
degree = st.sidebar.slider("Polynomial Degree", 1, 10, 2)

# Date range
end_date = datetime.now()
start_date = end_date - timedelta(days=days)

# Main analysis
st.header(f"Analysis for {ticker}")

if st.sidebar.button("Run Analysis"):
    try:
        with st.spinner(f'Downloading {ticker} data...'):
            data = yf.download(ticker, start=start_date, end=end_date, progress=False)

        if data.empty or len(data) < 10:
            st.error(f"No data found for {ticker}. Please check the ticker symbol.")
            st.stop()

        # Use 'High' prices
        high_prices = data['High']

        # Basic info
        col1, col2, col3 = st.columns(3)
        with col1:
            current_price = float(high_prices.iloc[-1])
            st.metric("Current Price", f"${current_price:.2f}")
        with col2:
            st.metric("Data Points", len(high_prices))
        with col3:
            st.metric("Analysis Period", f"{days} days")

        # Prepare data
        X = np.array([d.toordinal() for d in high_prices.index]).reshape(-1, 1)
        y = high_prices.values.astype(float)

        # Polynomial transformation
        poly = PolynomialFeatures(degree=degree)
        X_poly = poly.fit_transform(X)

        # Train model
        model = LinearRegression()
        model.fit(X_poly, y)
        y_pred = model.predict(X_poly)

        # Performance metrics
        rmse = np.sqrt(mean_squared_error(y, y_pred))
        r2 = r2_score(y, y_pred)

        st.subheader("Model Performance")
        c1, c2 = st.columns(2)
        with c1:
            st.metric("RMSE", f"${rmse:.2f}")
        with c2:
            st.metric("R¬≤ Score", f"{r2:.4f}")

        # --- Plot actual vs predicted ---
        st.subheader(f"Polynomial Fit (Degree = {degree})")
        fig, ax = plt.subplots(figsize=(10, 6))
        ax.plot(high_prices.index, y, label="Actual Price", color='blue', linewidth=2)
        ax.plot(high_prices.index, y_pred, label="Predicted Price", color='red', linestyle='--', linewidth=2)
        ax.set_title(f"{ticker} Polynomial Regression (Degree={degree})", fontweight="bold")
        ax.set_xlabel("Date")
        ax.set_ylabel("Price ($)")
        ax.legend()
        ax.grid(alpha=0.3)
        plt.xticks(rotation=45)
        plt.tight_layout()
        st.pyplot(fig)

        # --- Residual analysis ---
        st.subheader("Residual Analysis")
        residuals = y - y_pred

        # Residual plot
        fig, ax = plt.subplots(figsize=(10, 4))
        ax.plot(high_prices.index, residuals, label="Residuals", color='purple')
        ax.axhline(0, color='black', linestyle='--', linewidth=1)
        ax.set_title("Residual Plot")
        ax.set_xlabel("Date")
        ax.set_ylabel("Residuals ($)")
        ax.legend()
        plt.xticks(rotation=45)
        plt.tight_layout()
        st.pyplot(fig)

        # --- Statistical Tests ---
        st.subheader("Residual Diagnostics")

        # Ljung-Box test (autocorrelation)
        lb_result = acorr_ljungbox(residuals, lags=[10], return_df=True)
        lb_pvalue = lb_result['lb_pvalue'].iloc[0]

        # Jarque‚ÄìBera test (normality)
        jb_stat, jb_p, _, _ = jarque_bera(residuals)

        col1, col2 = st.columns(2)
        with col1:
            st.metric("Ljung‚ÄìBox p-value (no autocorr if > 0.05)", f"{lb_pvalue:.4f}")
        with col2:
            st.metric("Jarque‚ÄìBera p-value (normal if > 0.05)", f"{jb_p:.4f}")

        # --- Forecast next day ---
        st.subheader("Next Day Forecast")
        next_day_num = high_prices.index[-1].toordinal() + 1
        next_day_poly = poly.transform([[next_day_num]])
        next_day_pred = float(model.predict(next_day_poly)[0])

        change = next_day_pred - current_price
        change_pct = (change / current_price) * 100

        col1, col2 = st.columns(2)
        with col1:
            st.metric(
                "Next Day Prediction",
                f"${next_day_pred:.2f}",
                delta=f"{change:.2f} ({change_pct:.2f}%)"
            )
        with col2:
            st.metric("Current Price", f"${current_price:.2f}")

        # --- Recent Data ---
        with st.expander("View Recent Data"):
            df_display = pd.DataFrame({
                "Date": high_prices.tail(10).index.strftime("%Y-%m-%d"),
                "High Price": [f"${p:.2f}" for p in high_prices.tail(10).values]
            })
            st.dataframe(df_display)

    except Exception as e:
        st.error(f"An error occurred: {str(e)}")
        st.info("Try a different ticker or date range.")

# Footer
st.markdown("---")
st.markdown("Built with ‚ù§Ô∏è using Streamlit ‚Ä¢ Data from Yahoo Finance")